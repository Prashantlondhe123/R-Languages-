### load the tidyr package 

library(tidyr) 

# creating a data frame
tidy_dataframe = data.frame( 

                      S.No = c(1:n),  

                    Group.1 = c(23, 345, 76, 212, 88,  

                                199, 72, 35, 90, 265), 

                    Group.2 = c(117, 89, 66, 334, 90,  

                               101, 178, 233, 45, 200), 

                    Group.3 = c(29, 101, 239, 289, 176, 

                                320, 89, 109, 199, 56)) 

  
# print the elements of the data frame 
tidy_dataframe 

#dplyr Package in R Programming:
-The dplyr package in R Programming Language is a structure of data manipulation that provides a uniform set of verbs, helping to resolve the most frequent data manipulation hurdles

install.packages("dplyr")
# load the library
library(dplyr)

# Finding rows with NA value
d % > % filter(is.na(ht))
 
# Finding rows with no NA value
d % > % filter(! is.na(ht)) - ht is col 

 
# Arranging name according to the age
d.name<- arrange(d, age)
print(d.name)

## startswith() function to print only ht data

select(d, starts_with("ht"))
 
# -startswith() function to print
# everything except ht data

select(d, -starts_with("ht"))
 
# Printing column 1 to 2

select(d, 1: 2)
 
# Printing data of column
# heading containing 'a'

select(d, contains("a"))
 
# Printing data of column
# heading which matches 'na'

select(d, matches("na"))


##mutate() and transmute(): Addition of new variables which are the functions of prevailing variables.
# Calculating a variable x3 which is sum of height
# and age printing with ht and age

mutate(d, x3 = ht + age) 
 
# Calculating a variable x3 which is sum of height 
# and age printing without ht and age

transmute(d, x3 = ht + age)

##summarise(): Condensing various values to one value.
# Calculating mean of age

summarise(d, mean = mean(age))
 
# Calculating min of age

summarise(d, med = min(age))
 
# Calculating max of age

summarise(d, med = max(age))
 
# Calculating median of age

summarise(d, med = median(age))

##sample_n() and sample_frac(): For taking random specimens.
# Printing three rows

sample_n(d, 3)
 
# Printing 50 % of the rows

sample_frac(d, 0.50)


##Union() & union_all() functions in Dplyr package in R
# union of the two dataframes
print(union(data1,data2))

# union_all of the two dataframes
print(union_all(data1,data2))

##How to Remove a Column using Dplyr package in R
# remove id and name
print(select(data1,-c(name,id)))

# remove id 
print(select(data1,-id))
  
# remove multiple columns- name,id
print(select(data1,-c(name,id)))

##Remove column which contains a value or matches a pattern

# remove column that contains na
print(select(data1,-contains('na')))
      
# remove column that contains re
print(select(data1,-contains('re')))

##Remove column which starts with or ends with certain character
# remove column that starts with na
print(select(data1,-starts_with('na')))
      
# remove column that starts with ad
print(select(data1,-starts_with('ad')))

# remove column that ends with d
print(select(data1,-ends_with('d')))
      
# remove column that starts with ss
print(select(data1,-ends_with('ss'))

##Drop multiple columns using Dplyr package in R

# remove all column
print(select(data1,-c(address,name,id)))

# remove name and id  columns by 
# its position
print(select(data1,-c(1,2)))

### eliminating NA values
data_without_na <- data_frame %>%                      
  replace(is.na(.), 0) 
print("Row Wise Sum")
  
data_mod <- data_without_na%>%
  mutate(sum_of_rows = rowSums(.))
print(data_mod)

##Create, modify, and delete columns using dplyr package in R
# adding new columns
d <- mutate(d, Age=c(25, 28, 22, 27), Savings=Salary - Expenses)
  
print(d)
  
# adding a new column before FirstName
d <- mutate(d, Title=c("Mr", "Mr", "Ms", "Ms"), .before=FirstName)
print(d)
  
# adding a new column after FirstName
d <- mutate(d, LastName=c("Singh", "Pande", "Sinha", "Roy"),
             .after=FirstName)
  
print(d)

## Modify FirstName, Salary  column
d < - mutate(d, FirstName=c("Mahesh", "Jignesh", "Ria", "Tanya"),
             Salary=c(60000, 30000, 50000, 75000))
  
print(d)

### joins:
# perform inner join
inner_join(gfg1, gfg2, by="ID")

#perform left join
left_join(gfg1,gfg2, by = "ID") 

# perform right join
right_join(gfg1,gfg2, by = "ID") 

# perform full join
full_join(gfg1,gfg2, by = "ID") 

# perform semijoin
semi_join(gfg1,gfg2, by = "ID")

# perform anti join
anti_join(gfg1,gfg2, by = "ID") 

## Case in R Programming:
# Using case_when() to create new variable
data_frame % > % mutate(Price_status=case_when(Price >= 500000 & Price <= 900000 ~ "Average", Price > 900000 ~ "High", TRUE ~ "Low"))

##Using switch statement in R:
# Case_when() to create new variable
data_frame$Vehicle_Type <- sapply(data_frame$Brand, switch, "Tata Motors"='Car', 
                                  "Mahindra"='Car', "Maruti Suzuki" = 'Car')
data_frame

##cumall(), cumany() & cummean() R Functions of dplyr Package:


##Data Manipulation in R with Dplyr Package:
# fetch players who scored more
# than 100 runs
filter(stats, runs>100)

## removes duplicate rows
distinct(stats)
 
#remove duplicates based on a column
distinct(stats, player, .keep_all = TRUE)

## Sorting:
# ordered data based on runs
arrange(stats, runs)

## select specific col:
# fetch required column data
select(stats, player,wickets)

## Rename the col:
# renaming the column
rename(stats, runs_scored=runs)

## Create new col using existing col:
# add new column avg
mutate(stats, avg=runs/4)
 
# drop all and create a new column
transmute(stats, avg=runs/4)

##summarize method
summarize(stats, sum(runs), mean(runs))
# summarize method
summarize(stats, sum(runs), mean(runs))

##Group by one or more variables using Dplyr in :
 
# computing difference of each group
data_frame%>%group_by(col1,col2)

### rearrange the columns in alphabetic 
# order
data %>% select(order(colnames(data)))

### arrange the rows based on salary
# column in descending order
data %>% arrange(desc(salary))

## Intersection:
# intersect both dataframes
print(intersect(data1,data2))
  
# intersect on multiple  dataframes
print(intersect(data1,data2,data3))

## Get difference in dataframe
# set difference of second dataframe
# and first dataframe
print(setdiff(data2,data1))

#############################################################tidyr Package in R Programming
Packages in the R language are a collection of R functions, compiled code, and sample data. They are stored under a directory called “library” in the R environment. By default, R installs a set of packages during installation.  One of the most important packages in R is the tidyr package. The sole purpose of the tidyr package is to simplify the process of creating tidy data. Tidy data describes a standard way of storing data that is used wherever possible throughout the tidyverse. If you once make sure that your data is tidy, you’ll spend less time punching with the tools and more time working on your analysis

#install.packages("tidyr")
library(tidyr)

##############  Lubridate library - Datatime ########
-Lubridate is an R package that makes it easier to work with dates and times. Below is a concise tour of some of the things lubridate can do for you. Lubridate was created by Garrett Grolemund and Hadley Wickham, and is now maintained by Vitalie Spinu

The easiest way to get lubridate is to install the whole tidyverse:
install.packages("tidyverse")

# Alternatively, install just lubridate:
install.packages("lubridate")






